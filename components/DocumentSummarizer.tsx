import React, { useState, RefObject } from 'react';
import { summarizeDocument } from '../services/geminiService';
import * as pdfjsLib from 'pdfjs-dist';

// Configure the PDF.js worker to enable PDF processing in the browser.
pdfjsLib.GlobalWorkerOptions.workerSrc = `https://esm.sh/pdfjs-dist@4.4.168/build/pdf.worker.min.js`;


interface DocumentSummarizerProps {
    fileInputRef: RefObject<HTMLInputElement>;
}

const DocumentSummarizer: React.FC<DocumentSummarizerProps> = ({ fileInputRef }) => {
  const [file, setFile] = useState<File | null>(null);
  const [summary, setSummary] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [progress, setProgress] = useState<number>(0);

  const allowedFileTypes = ['text/plain', 'application/pdf'];

  const validateAndSetFile = (selectedFile: File) => {
    if (selectedFile && allowedFileTypes.includes(selectedFile.type)) {
      setFile(selectedFile);
      setSummary('');
      setError('');
      setProgress(0);
    } else {
      setError('Only .txt and .pdf files are supported.');
      setFile(null);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      validateAndSetFile(e.target.files[0]);
    }
  };

  const handleSummarize = async () => {
    if (!file) {
      setError('Please select a file first.');
      return;
    }
    setIsLoading(true);
    setError('');
    
    const progressInterval = setInterval(() => {
        setProgress(prev => {
            if(prev >= 95) {
                clearInterval(progressInterval);
                return prev;
            }
            return prev + 5;
        });
    }, 100);

    try {
        let fileContent = '';
        if (file.type === 'application/pdf') {
            const arrayBuffer = await file.arrayBuffer();
            const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;
            const numPages = pdf.numPages;
            for (let i = 1; i <= numPages; i++) {
                const page = await pdf.getPage(i);
                const textContent = await page.getTextContent();
                const pageText = textContent.items.map(item => ('str' in item ? item.str : '')).join(' ');
                fileContent += pageText + '\n\n';
            }
        } else {
             fileContent = await file.text();
        }

        if (!fileContent.trim()) {
            setError('Could not extract any text from the document.');
            setProgress(0);
            throw new Error('Empty content');
        }

        const result = await summarizeDocument(fileContent);
        setSummary(result);
        setProgress(100);
    } catch (e) {
        if (!error) { // Don't overwrite specific error messages
          setError('Failed to read or summarize the file.');
        }
    } finally {
        setIsLoading(false);
        clearInterval(progressInterval);
    }
  };

  const onDragOver = (e: React.DragEvent<HTMLDivElement>) => {
      e.preventDefault();
  }
  
  const onDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    if(e.dataTransfer.files && e.dataTransfer.files[0]) {
       validateAndSetFile(e.dataTransfer.files[0]);
    }
  }

  return (
    <div className="flex-1 flex flex-col p-6 bg-background dark:bg-dark-background overflow-y-auto">
      <div className="max-w-4xl mx-auto w-full">
        <h2 className="text-2xl font-bold mb-4 text-primary dark:text-dark-primary">Document Summarizer</h2>
        <p className="mb-6 text-secondary dark:text-dark-secondary">Upload a .txt or .pdf document to get a concise summary generated by AI.</p>
        
        <div onDragOver={onDragOver} onDrop={onDrop} className="border-2 border-dashed border-border dark:border-dark-border rounded-lg p-8 text-center bg-sidebar dark:bg-dark-sidebar cursor-pointer hover:border-primary/50 dark:hover:border-dark-primary/50 transition-colors" onClick={() => fileInputRef.current?.click()}>
            <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                className="hidden"
                accept=".txt,.pdf"
            />
            <p className="text-secondary dark:text-dark-secondary">Drag & drop a file here, or click to select a file (.txt, .pdf).</p>
        </div>

        {file && (
          <div className="mt-6 p-4 bg-sidebar dark:bg-dark-sidebar rounded-lg shadow-sm">
            <div className="flex justify-between items-center">
                <p className="font-medium">Selected file: <span className="text-primary dark:text-dark-primary font-semibold">{file.name}</span></p>
                <button onClick={() => setFile(null)} className="text-red-500 hover:text-red-700 font-semibold">Clear</button>
            </div>
             {(isLoading || progress > 0) && (
              <div className="w-full bg-border dark:bg-dark-border rounded-full h-2.5 mt-2">
                <div className="bg-primary dark:bg-dark-primary h-2.5 rounded-full transition-all duration-300" style={{ width: `${progress}%` }}></div>
              </div>
            )}
          </div>
        )}

        {error && <p className="mt-4 text-red-500 text-center">{error}</p>}
        
        <div className="mt-6 text-center">
            <button
                onClick={handleSummarize}
                disabled={!file || isLoading}
                className="px-8 py-3 bg-primary text-background dark:bg-dark-primary dark:text-dark-background font-semibold rounded-lg shadow-md hover:opacity-90 disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-not-allowed transition-all"
            >
                {isLoading ? 'Summarizing...' : 'Generate Summary'}
            </button>
        </div>

        {summary && (
            <div className="mt-8">
                <h3 className="text-xl font-bold mb-4 text-primary dark:text-dark-primary">Summary Result</h3>
                <div className="p-6 bg-sidebar dark:bg-dark-sidebar rounded-lg shadow-sm text-primary dark:text-dark-primary whitespace-pre-wrap leading-relaxed">
                    {summary}
                </div>
            </div>
        )}
      </div>
    </div>
  );
};

export default DocumentSummarizer;